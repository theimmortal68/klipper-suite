#!/bin/bash

set -u

# Functions intended for use by the rpi-image-gen core build system only.
# There should be no need for this script to be included by anything else.


# If a variable is unset, or set to the empty string, initialise it
assignv() {
   local var="$1"
   local val="$2"
   if [ -z "${!var+x}" ] || [ -z "${!var-x}" ] ; then
      if [[ "$val" =~ ^$ ]] ; then
         eval unset "${var}"
      else
         eval export "${var}=\"$val\""
      fi
   fi
}

# Merge a single section from a config file into the environment
merge_config_section() {
   local section="${1,,}"
   local file="$2"
   local attrs=$(crudini --get --existing --format=lines "$file" "$section" || true)
   [ -n "$attrs" ] || return 0
   while IFS="=" read -r key value ; do
      [[ "$key" =~ ^#.*$ ]] && continue
      [[ "$key" =~ ^$ ]] && continue
      local var="IGconf_${section}_${key,,}"
      assignv "$var" "$value"
   done < <(printf '%s\n' "$attrs")
}

# Merge all known sections from a cfg into the environment
merge_config() {
   local cfg="$1"
   [ -f "$cfg" ] || return 0

   while IFS="=" read -r key value ; do
      [[ "$key" =~ ^#.*$ ]] && continue
      [[ "$key" =~ ^$ ]] && continue
      case "${key,,}" in
         include)
            [ -f "$value" ] && merge_config "$value"
            ;;
      esac
   done < <(crudini --get --existing --format=lines "$cfg" 'include' || true)

   while IFS="=" read -r key value ; do
      [[ "$key" =~ ^#.*$ ]] && continue
      [[ "$key" =~ ^$ ]] && continue
      case "${key,,}" in
         import)
            [ -f "$value" ] && merge_config "$value"
            ;;
      esac
   done < <(crudini --get --existing --format=lines "$cfg" 'import' || true)

   while IFS="=" read -r key value ; do
      [[ "$key" =~ ^#.*$ ]] && continue
      [[ "$key" =~ ^$ ]] && continue
      case "${key,,}" in
         defaults)
            [ -f "$value" ] && merge_config_section defaults "$value"
            ;;
      esac
   done < <(crudini --get --existing --format=lines "$cfg" 'defaults' || true)

   while IFS="=" read -r key value ; do
      [[ "$key" =~ ^#.*$ ]] && continue
      [[ "$key" =~ ^$ ]] && continue
      case "${key,,}" in
         options)
            [ -f "$value" ] && merge_config_section options "$value"
            ;;
      esac
   done < <(crudini --get --existing --format=lines "$cfg" 'options' || true)

   # Known explicit sections
   merge_config_section device "$cfg"
   merge_config_section image "$cfg"
   merge_config_section sys "$cfg"
   merge_config_section meta "$cfg"
}

# shell variable list parser reading key value pairs into the env with optional
# section prefix. key names will be prefixed and converted to lower 
aggregate_options() {
   if [[ $# -eq 2 && -f $2 ]] ; then
      local attrs=$(cat "$2")
   else
      local attrs=$(cat)
   fi
   local section="${1,,}"
   while IFS="=" read -r key value ; do
      [[ "$key" =~ ^#.*$ ]] && continue
      [[ "$key" =~ ^$ ]] && continue
      local var="IGconf_${section}_${key,,}"
      assignv "$var" "$value"
   done < <(printf '%s\n' "$attrs")
}
