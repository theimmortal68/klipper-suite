name: Build Images (Device Matrix)

on:
  workflow_dispatch:
    inputs:
      suite:
        description: "Debian suite (bookworm, trixie)"
        required: true
        default: "bookworm"
      kernel_flavor:
        description: "Kernel flavor (mainline, mainline-backports, vendor)"
        required: true
        default: "mainline"
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - device: pi5
            config: config/pi5.cfg
          - device: pi4
            config: config/pi4.cfg
          - device: zero2w
            config: config/zero2w.cfg
          - device: cm4
            config: config/cm4.cfg
          - device: cm5
            config: config/cm5.cfg
          - device: opi5max
            config: config/opi5max.cfg

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            mmdebstrap qemu-user-static dosfstools e2fsprogs parted gdisk \
            genimage u-boot-tools squashfs-tools xz-utils unzip wget curl jq bc \
            kpartx kmod rsync file

      - name: Show inputs
        run: |
          echo "Suite: ${{ github.event.inputs.suite || 'bookworm' }}"
          echo "Kernel flavor: ${{ github.event.inputs.kernel_flavor || 'mainline' }}"

      - name: Guard
        if: ${{ matrix.device == 'pi5' || matrix.device == 'pi4' || matrix.device == 'cm4' || matrix.device == 'cm5' || matrix.device == 'zero2w' }}
        run: |
          set -euo pipefail
          # Only scan Pi-related layers (not other boards like OPi)
          paths=(meta/rpi meta/boards/pi4.yaml meta/boards/pi5.yaml meta/boards/cm4.yaml meta/boards/cm5.yaml meta/boards/zero2w.yaml)
          for p in "${paths[@]}"; do
            [ -e "$p" ] || continue
            if grep -R -nE '\b(t\s+)?install\s+.*linux-image-arm64(\b|[^-])' "$p"; then
              echo "::error::Found 'linux-image-arm64' install in Pi layers. Use Raspberry Pi kernel meta-packages instead (linux-image-rpi-2712 or linux-image-rpi-v8)."
              exit 1
            fi
          done

      - name: Build (${{ matrix.device }})
        env:
          KS_SUITE: ${{ github.event.inputs.suite || 'bookworm' }}
          KS_KERNEL_FLAVOR: ${{ github.event.inputs.kernel_flavor || 'mainline' }}
        run: |
          set -euxo pipefail
          chmod +x build.sh
          ./build.sh --in "options={'config':'${{ matrix.config }}'}"

      - name: Collect artifacts (${{ matrix.device }})
        if: always()
        run: |
          mkdir -p out/${{ matrix.device }}
          # Collect likely images or archives from work/
          find work -maxdepth 3 -type f \
            \( -name '*.img' -o -name '*.img.zst' -o -name '*.img.xz' -o -name '*.zip' -o -name '*.tar.gz' -o -name '*.xz' \) \
            -exec cp -v {} out/${{ matrix.device }}/ \; || true
          # Include logs
          find work -type f -name '*.log' -exec cp -v --parents {} out/${{ matrix.device }} \; || true
          # Fallback: snapshot work tree if nothing else found
          if [ -z "$(ls -A out/${{ matrix.device }} 2>/dev/null || true)" ]; then
            tar -C work -czf out/${{ matrix.device }}/work-tree.tar.gz . || true
          fi

      - name: Upload artifacts (${{ matrix.device }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.device }}-${{ github.event.inputs.suite || 'bookworm' }}
          path: out/${{ matrix.device }}
          if-no-files-found: warn
